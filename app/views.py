# -*- coding: utf-8 -*-
from flask import render_template
from app import app
from flask.ext.restful import reqparse, abort, Api, Resource
import time
import hashlib
from app.predictor_db import PredictorDataBase as pdb
from random import randint

@app.route('/')
@app.route('/index')
def index():
    user = { 'nickname': 'Miguel' } # выдуманный пользователь
    return render_template("index.html",
        title = 'Home',
        user = user)

api = Api(app)
pdb = pdb()

REACTIONS = {
    '111': {'task_id': '111',
            'reaction_status': 0,
            'reaction_data': '<?xml version="1.0" encoding="windows-1251"?><cml xmlns="http://www.chemaxon.com"'
                             ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.chemaxon.com/marvin/schema/mrvSchema_14_8_4.xsd" '
                             'version="ChemAxon file format v14.8.4, generated by v14.9.29.0"><MDocument><MChemicalStruct>'
                             '<reaction><arrow type="DEFAULT" x1="-4.413750171661377" y1="3.877500057220459" x2="0.1254371866731782" y2="3.8775000572204585"></arrow>'
                             '<reactantList><molecule molID="m1"><atomArray atomID="a1 a2" elementType="C C" x2="-6.641250133514404 -6.228750228881836" y2="4.537499904632568 3.09375"></atomArray>'
                             '<bondArray><bond id="b1" atomRefs2="a1 a2" order="1"></bond></bondArray></molecule></reactantList>'
                             '<productList><molecule molID="m2"><atomArray atomID="a1 a2" elementType="C C" x2="1.03125 2.557499885559082" '
                             'y2="4.331250190734863 2.846250057220459"></atomArray><bondArray><bond id="b1" atomRefs2="a1 a2" order="2"></bond>'
                             '</bondArray></molecule></productList></reaction></MChemicalStruct></MDocument></cml>',
            'temperature': '296C',
            'solvent': '2', 'model': 'SN2'},
    '222': {'task_id': '111',
            'reaction_status': 0,
            'reaction_data': '<cml><MDocument><MChemicalStruct><molecule molID=\"m1\"><atomArray><atom id=\"a1\" elementType=\"C\" x2=\"-3.958333333333333\" y2=\"-1.918333345653334\"/><atom id=\"a2\" elementType=\"C\" x2=\"-5.2920666559968\" y2=\"-2.688333339493334\"/><atom id=\"a3\" elementType=\"C\" x2=\"-5.2920666559968\" y2=\"-4.228519993838508\"/><atom id=\"a4\" elementType=\"C\" x2=\"-3.958333333333333\" y2=\"-4.998333321013334\"/><atom id=\"a5\" elementType=\"C\" x2=\"-2.624600010669867\" y2=\"-4.228519993838508\"/><atom id=\"a6\" elementType=\"C\" x2=\"-2.624600010669867\" y2=\"-2.688333339493334\"/><atom id=\"a7\" elementType=\"C\" x2=\"3.2082400000007483\" y2=\"-1.834906678987414\"/><atom id=\"a8\" elementType=\"C\" x2=\"1.8746933440024538\" y2=\"-2.604906672827413\"/><atom id=\"a9\" elementType=\"C\" x2=\"1.8746933440024538\" y2=\"-4.145093327172587\"/><atom id=\"a10\" elementType=\"C\" x2=\"3.2082400000007483\" y2=\"-4.915093321012587\"/><atom id=\"a11\" elementType=\"C\" x2=\"4.541973322664212\" y2=\"-4.145093327172587\"/><atom id=\"a12\" elementType=\"C\" x2=\"4.541973322664212\" y2=\"-2.604906672827413\"/></atomArray><bondArray><bond atomRefs2=\"a1 a2\" order=\"1\"/><bond atomRefs2=\"a1 a6\" order=\"1\"/><bond atomRefs2=\"a2 a3\" order=\"1\"/><bond atomRefs2=\"a3 a4\" order=\"1\"/><bond atomRefs2=\"a4 a5\" order=\"1\"/><bond atomRefs2=\"a5 a6\" order=\"1\"/><bond atomRefs2=\"a7 a8\" order=\"2\"/><bond atomRefs2=\"a8 a9\" order=\"1\"/><bond atomRefs2=\"a9 a10\" order=\"2\"/><bond atomRefs2=\"a10 a11\" order=\"1\"/><bond atomRefs2=\"a11 a12\" order=\"2\"/><bond atomRefs2=\"a12 a7\" order=\"1\"/></bondArray></molecule></MChemicalStruct><MPolyline headLength=\"0.6\" headWidth=\"0.4\" id=\"o1\"><MPoint x=\"-2.1666666666666665\" y=\"-3.1666666666666665\"/><MPoint x=\"1.3355647648638085\" y=\"-3.1666666666666665\"/></MPolyline></MDocument></cml>',
            'temperature': '296C',
            'solvent': '1', 'model': 'SN1'},
    '333': {'task_id': '111',
            'reaction_status': 0,
            'reaction_data': '<cml><MDocument><MChemicalStruct><molecule molID=\"m1\"><atomArray><atom id=\"a1\" elementType=\"C\" x2=\"-1.2916666666666667\" y2=\"5.708333333333333\"/><atom id=\"a2\" elementType=\"O\" x2=\"-1.452640500098853\" y2=\"4.176769614466192\"/><atom id=\"a3\" elementType=\"C\" x2=\"3.5833333333333335\" y2=\"5.708333333333333\"/><atom id=\"a4\" elementType=\"O\" x2=\"4.291666666666667\" y2=\"4.583333333333333\"/></atomArray><bondArray><bond atomRefs2=\"a1 a2\" order=\"1\"/><bond atomRefs2=\"a3 a4\" order=\"2\"/></bondArray></molecule></MChemicalStruct><MPolyline headLength=\"0.6\" headWidth=\"0.4\" id=\"o1\"><MPoint x=\"0.08333333333333333\" y=\"5.166666666666667\"/><MPoint x=\"2.7916666666666665\" y=\"5.166666666666667\"/></MPolyline></MDocument></cml>',
            'temperature': '296C',
            'solvent': '1', 'model': 'E1'}
}

TASKS = {
    '111': {'task_status': 0}
}


TASK_CREATED    = 0
REQ_MAPPING     = 1
MAPPING_DONE    = 2
REQ_MODELLING   = 3
MODELLING_DONE  = 4

def abort_if_task_doesnt_exist(task_id):
   if task_id not in TASKS:
       print (' задача не найдена '+task_id)
       abort(404, message="Task {} doesn't exist".format(task_id))

def abort_if_reaction_doesnt_exist(reaction_id):
   if reaction_id not in REACTIONS:
       print (' реакция не найдена '+reaction_id)
       abort(404, message="Reaction {} doesn't exist".format(reaction_id))


def get_new_id():
    x = str(time.time())+str(randint(1,999))+"qwertyuiopasdfghjklzxcvbnm"
    return hashlib.md5(x.encode("utf-8")).hexdigest()


def find_reaction(reaction_id):
    return REACTIONS.get(reaction_id)


def update_reaction(reaction_id, data, solvent, temperature):
    reaction = REACTIONS.get(reaction_id)
    if data:
        reaction['reaction_data'] = data
    if solvent:
        reaction['solvent'] = solvent
    if temperature:
        reaction['temperature'] = temperature




parser = reqparse.RequestParser()
parser.add_argument('reaction_data', type=str)
parser.add_argument('temperature', type=str)
parser.add_argument('solvent', type=str)
parser.add_argument('task_status', type=int)



class ReactionListAPI(Resource):
    def get(self):
        return REACTIONS


class ReactionAPI(Resource):
    def get(self, reaction_id):
        abort_if_reaction_doesnt_exist(reaction_id)
        return REACTIONS[reaction_id]

    def post(self):
        args = parser.parse_args()
        reaction_id = get_new_id()
        REACTIONS[reaction_id] = {'reaction_data': args['reaction_data'] }
        return reaction_id, 201

    def put(self, reaction_id):
        args = parser.parse_args()
        abort_if_reaction_doesnt_exist(reaction_id)
        update_reaction(reaction_id, args['reaction_data'], args['solvent'], args['temperature'])
        return reaction_id, 201


def create_new_task():
    task_id = get_new_id()
    TASKS[task_id] = {'task_status': 0}
    return task_id


def find_task(task_id):
    return TASKS.get(task_id)


def update_task_status(task_id, task_status):
    task = TASKS.get(task_id)
    if task is not None:
        task['task_status'] = task_status


def insert_reaction(task_id, mol_data):
    reaction_id = get_new_id()
    REACTIONS[reaction_id] = {'task_id': task_id,
                              'reaction_data': mol_data}


def find_task_reactions(task_id):
    reactions = []
    for key, val in REACTIONS.items():
        try:
            if val['task_id'] == task_id:
                val['reaction_id'] = key
                reactions.append(val)
        except:
            pass
    print('кол-во найденных реакций '+str(len(reactions)))
    return reactions


class TaskListAPI(Resource):
    def get(self):
        return TASKS

    def post(self):
        task_id = create_new_task()
        args = parser.parse_args()
        insert_reaction(task_id, args['reaction_data'])
        return task_id


class TaskAPI (Resource):
    def get(self, task_id):
        abort_if_task_doesnt_exist(task_id)
        return find_task(task_id)


    def post(self):
        task_id = create_new_task()
        args = parser.parse_args()
        insert_reaction(task_id, args['reaction_data'] )
        return task_id


    def put(self,task_id):
        abort_if_task_doesnt_exist(task_id)
        args = parser.parse_args()
        task_status = args['task_status']
        print('task_id='+task_id)
        print('args[ task_status ]=' + str(task_status))
        update_task_status(task_id,task_status)
        return task_id


class TaskReactionsAPI (Resource):
    def get(self, task_id):
        return find_task_reactions(task_id)


class ModelsAPI(Resource):
    def get(self):
        return pdb.get_models()


class SolventsAPI(Resource):
    def get(self):
        return pdb.get_solvents()


class TaskResultsAPI(Resource):
    def get(self, task_id):
        return pdb.get_results_by_task(task_id)


##
## Actually setup the Api resource routing here
##
api.add_resource(ReactionListAPI, '/reactions')
api.add_resource(ReactionAPI, '/reaction/<reaction_id>')

api.add_resource(TaskAPI, '/task/<task_id>')
api.add_resource(TaskListAPI, '/tasks')

api.add_resource(TaskReactionsAPI, '/task_reactions/<task_id>')

api.add_resource(TaskResultsAPI, '/task_results/<task_id>')

api.add_resource(ModelsAPI, '/models')
api.add_resource(SolventsAPI, '/solvents')